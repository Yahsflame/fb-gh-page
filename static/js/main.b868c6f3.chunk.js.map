{"version":3,"sources":["components/SearchResults.js","components/Search.js","components/Saved.js","App.js","serviceWorker.js","index.js"],"names":["tags","SearchResults","updateSavedResultsC2","event","res","props","updateSavedResultsC1","split","imageListContent","this","results","classes","map","i","Card","key","className","card","CardMedia","media","image","webformatURL","title","Button","onClick","button","color","CardActions","Grid","item","xs","iconSection","Typography","variant","gutterBottom","h6","likes","ThumbUp","favorites","Star","cardActions","updateTags","tag","Chip","label","Component","withStyles","theme","maxWidth","margin","justifyContent","height","minWidth","fontSize","borderBottom","display","marginRight","Search","sortCategories","setState","categories","state","sort","a","b","value","updateSavedResults","handleChange","e","lowercaseKeyword","target","toLowerCase","searchText","handleSelect","categorySelection","handleSubmit","axios","get","apiUrl","apiKey","amount","then","images","data","hits","catch","err","console","log","isDisabled","prevProps","prevState","snapshot","root","noValidate","autoComplete","container","TextField","id","onChange","trim","select","helperText","option","MenuItem","disabled","length","bind","spacing","width","padding","Saved","newSaves","savedResults","nextProps","concat","savedContent","result","Link","href","largeImageURL","App","includes","alert","sm","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b868c6f3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Chip from '@material-ui/core/Chip';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport {ThumbUp, Star} from '@material-ui/icons';\nimport { withStyles } from '@material-ui/core/styles';\n\nlet tags;\nconst useStyles = theme => ({\n    card: {\n        maxWidth: 345,\n        margin: '50px auto',\n        justifyContent: \"space-around\",\n    },\n    media: {\n        height: 200,\n    },\n    cardActions: {\n        justifyContent: \"center\",\n    },\n    button: {\n        minWidth: \"100%\",\n        fontSize: \"1.2em\",\n        borderBottom: \"1px solid #eee\",\n    },\n    iconSection: {\n        display: \"inline-flex\",\n        justifyContent: \"center\",\n    },\n    h6: {\n        marginRight: \"5px\",\n    }\n});\n\nclass SearchResults extends Component {\n\n    updateSavedResultsC2 = (event, res) => {\n        this.props.updateSavedResultsC1(event, res);\n    }\n\n    updateTags(res) {\n        tags = res.tags.split(',');\n    }\n\n    render() {\n        let imageListContent;\n\n        const {results, classes} = this.props;\n\n        if (results){\n            imageListContent = (\n                results.map((res, i) => (\n                    <Card key={`${i}-result`} className={classes.card}>\n                        <CardMedia\n                            className={classes.media}\n                            image={res.webformatURL}\n                            title={`used from ${res.webformatURL}`}\n                        />\n                        <Button onClick={(event) => this.updateSavedResultsC2(event, res)} className={classes.button} color=\"primary\">\n                            Save\n                        </Button>\n                        <CardActions>\n                            <Grid item xs={6} className={classes.iconSection}>\n                                <Typography variant=\"h6\" gutterBottom className={classes.h6}>{res.likes}</Typography>\n                                <ThumbUp></ThumbUp>\n                            </Grid>\n                            <Grid item xs={6} className={classes.iconSection}>\n                                <Typography variant=\"h6\" gutterBottom className={classes.h6}>{res.favorites}</Typography>\n                                <Star></Star>\n                            </Grid>\n                        </CardActions>\n                        <CardActions className={classes.cardActions}>\n                            {this.updateTags(res)}\n                            {tags.map((tag, i) => (\n                                <Chip key={`${tag}-${i}`} label={tag} color=\"primary\"/>\n                            ))}\n                        </CardActions>\n                    </Card>\n                ))\n            )\n\n        }else{\n            imageListContent = null;\n        }\n\n        return (\n        <div>\n            {imageListContent}\n        </div>\n        )\n    }\n}\n\nSearchResults.propTypes = {\n    results:PropTypes.array.isRequired\n}\n\nexport default withStyles(useStyles)(SearchResults);","import React,  { Component } from 'react';\nimport SearchResults from './SearchResults';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport axios from 'axios';\n\nconst useStyles = theme => ({\n    root: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: 200,\n      },\n    },\n    button: {\n        margin: 'auto',\n        fontSize: '1em',\n        padding: '20px 60px',\n    },\n});\n\nclass Search extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            searchText:'',\n            amount:10,\n            apiUrl: 'https://pixabay.com/api',\n            apiKey: '13136421-266c28a6d61717bc2e4e6a83e',\n            images:[],\n            categories: [\n                {\n                value: 'fashion',\n                label: 'fashion',\n                },\n                {\n                value: 'nature',\n                label: 'nature',\n                },\n                {\n                value: 'backgrounds',\n                label: 'backgrounds',\n                },\n                {\n                value: 'science',\n                label: 'science',\n                },\n                {\n                    value: 'education',\n                    label: 'education',\n                },\n                {\n                    value: 'people',\n                    label: 'people',\n                },\n                {\n                    value: 'feelings',\n                    label: 'feelings',\n                },\n                {\n                    value: 'religion',\n                    label: 'religion',\n                },\n                {\n                    value: 'health',\n                    label: 'health',\n                },\n                {\n                    value: 'places',\n                    label: 'places',\n                },\n                {\n                    value: 'animals',\n                    label: 'animals',\n                },\n                {\n                    value: 'industry',\n                    label: 'industry',\n                },\n                {\n                    value: 'food',\n                    label: 'food',\n                },\n                {\n                    value: 'computer',\n                    label: 'computer',\n                },\n                {\n                    value: 'sports',\n                    label: 'sports',\n                },\n                {\n                    value: 'transportation',\n                    label: 'transportation',\n                },\n                {\n                    value: 'travel',\n                    label: 'travel',\n                },\n                {\n                    value: 'buildings',\n                    label: 'buildings',\n                },\n                {\n                    value: 'business',\n                    label: 'business',\n                },\n                {\n                    value: 'music',\n                    label: 'music',\n                },\n            ],\n            categorySelection: '',\n            isDisabled: true,\n        };\n        \n        this.sortCategories();\n    }\n\n    sortCategories = () => {\n        this.setState.categories = this.state.categories.sort((a, b) => (a.value > b.value) ? 1 : (a.value === b.value) ? ((a.label > b.label) ? 1 : -1) : -1 );\n    };\n\n    updateSavedResultsC1 = (event, res) => {\n        this.props.updateSavedResults(event, res);\n    }\n\n    handleChange = (e) => {\n        const lowercaseKeyword = e.target.value.toLowerCase();\n        this.setState({searchText: lowercaseKeyword});\n    };\n\n    handleSelect = (e) => {\n        this.setState({categorySelection: e.target.value});\n    };\n\n    handleSubmit = () => {\n        axios.get(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&category=${this.state.categorySelection}&image_type=photo&per_page=${this.state.amount}`)\n        .then(res =>this.setState({images:res.data.hits}))\n        .catch(err=> console.log(err));\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot){\n        if(this.state.searchText !== prevState.searchText || this.state.categorySelection !== prevState.categorySelection){\n            if(this.state.searchText !== '' && this.state.categorySelection !== ''){\n                this.setState({isDisabled: false});\n            } else {\n                this.setState({isDisabled: true});\n            }\n        }\n    };\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div className='Search'>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <Grid container >\n                        <Grid item xs={12}>\n                            <TextField \n                            id=\"outlined-basic\" \n                            label=\"Keyword...\" \n                            variant=\"outlined\"\n                            onChange={this.handleChange}\n                            value={this.state.searchText.trim()} />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                            id=\"outlined-select-currency\"\n                            select\n                            label=\"Select\"\n                            value={this.state.categorySelection}\n                            onChange={this.handleSelect}\n                            helperText={this.state.categorySelection !== '' ? \"\" : \"Please select your category\"}\n                            variant=\"outlined\"\n                            >\n                            {this.state.categories.map(option => (\n                                <MenuItem key={option.value} value={option.value}>\n                                {option.label}\n                                </MenuItem>\n                            ))}\n                            </TextField>\n                        </Grid>\n                        <Button disabled={this.state.isDisabled} onClick={this.handleSubmit} className={classes.button} variant=\"contained\" color=\"primary\">\n                            Search\n                        </Button>\n                    </Grid>\n                </form>\n                {this.state.images.length > 0 ? (<SearchResults updateSavedResultsC1={this.updateSavedResultsC1.bind(this)} results={this.state.images}/>) : null}\n            </div>\n        );\n    }\n}\n\nexport default withStyles(useStyles)(Search);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst useStyles = theme => ({\n    card: {\n        maxWidth: 345,\n        margin: '50px auto',\n        justifyContent: \"space-around\",\n    },\n    media: {\n        height: 200,\n    },\n    cardActions: {\n        justifyContent: \"center\",\n    },\n    button: {\n        minWidth: \"100%\",\n        fontSize: \"1.2em\",\n        borderBottom: \"1px solid #eee\",\n    },\n    iconSection: {\n        display: \"inline-flex\",\n        justifyContent: \"center\",\n    },\n    h6: {\n        marginRight: \"5px\",\n    }\n});\n\nclass Saved extends Component {\n    state = {\n        newSaves: this.props.savedResults\n    }\n\n    componentDidUpdate(nextProps) {\n        if(this.props !== nextProps){\n            this.setState(prevState => ({\n                newSaves: [...prevState.newSaves.concat(this.props.savedResults)]\n            }))\n        }\n    }\n\n    render() {\n        let savedContent;\n\n        savedContent = (\n            this.state.newSaves.map((result, i) => (\n                <div key={`result-${i}`}>\n                    <Typography>\n                        <Link target=\"_blank\" href={result.largeImageURL}>\n                            #ID {result.id}\n                        </Link>\n                    </Typography>\n                </div>\n            ))\n        )\n\n        return (\n        <div>\n            <Typography variant=\"h5\" gutterBottom>Your saved images</Typography>\n            {savedContent}\n        </div>\n        )\n    }\n}\n\nSaved.propTypes = {\n    savedResults:PropTypes.array.isRequired\n}\n\nexport default withStyles(useStyles)(Saved);","import React, { Component } from 'react';\nimport Search from './components/Search';\nimport Saved from './components/Saved';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      savedResults: [],\n    }\n  }\n\n  updateSavedResults(event, res) {\n    if(this.state.savedResults.includes(res)){\n      alert('You have already saved this image');\n    } else {\n      this.setState(() => ({\n        savedResults: [res]\n      }))\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <Grid container >\n          <Grid item xs={12} sm={6} className=\"search-container\">\n            <Search updateSavedResults={this.updateSavedResults.bind(this)} />\n          </Grid>\n          <Grid item xs={12} sm={6} className=\"saved-container\">\n            {this.state.savedResults.length > 0 ? (<Saved savedResults={this.state.savedResults}/>) : (<Typography variant=\"h5\" gutterBottom>You do not have any images saved yet</Typography>)}\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}